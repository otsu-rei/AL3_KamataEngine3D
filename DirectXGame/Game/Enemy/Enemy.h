#pragma once

//-----------------------------------------------------------------------------------------
// include
//-----------------------------------------------------------------------------------------
// c++
#include <cstdint>

// engine
#include "Model.h"
#include "ViewProjection.h"
#include "WorldTransform.h"

//-----------------------------------------------------------------------------------------
// forward
//-----------------------------------------------------------------------------------------
class Enemy;

////////////////////////////////////////////////////////////////////////////////////////////
// BaseEnemyState base class
////////////////////////////////////////////////////////////////////////////////////////////
class BaseEnemyState {
public:

	//=========================================================================================
	// public methods
	//=========================================================================================

	BaseEnemyState(Enemy* enemy) : enemy_(enemy) {}

	virtual ~BaseEnemyState() {}

	virtual void Update() = 0;

protected:

	//=========================================================================================
	// protected variables
	//=========================================================================================

	Enemy* enemy_;

};

////////////////////////////////////////////////////////////////////////////////////////////
// EnemyStateApproach class
////////////////////////////////////////////////////////////////////////////////////////////
class EnemyStateApproach
	: public BaseEnemyState {
public:

	EnemyStateApproach(Enemy* enemy);

	void Update();

};

////////////////////////////////////////////////////////////////////////////////////////////
// EnemyStateLeave class
////////////////////////////////////////////////////////////////////////////////////////////
class EnemyStateLeave
	: public BaseEnemyState {
public:

	EnemyStateLeave(Enemy* enemy);

	void Update();
};

////////////////////////////////////////////////////////////////////////////////////////////
// Enemy class
////////////////////////////////////////////////////////////////////////////////////////////
class Enemy {
public:

	//=========================================================================================
	// public variables
	//=========================================================================================

	// parameters //
	const float kMoveSpeed_ = 0.2f;

	//=========================================================================================
	// public methods
	//=========================================================================================

	//! @brief 初期化処理
	void Init(Model* model, uint32_t textureHandle);

	//! @brief 更新処理
	void Update();

	//! @brief 描画処理
	void Draw(const ViewProjection& viewProj);

	//! @brief ImGuiに設定
	void SetOnImGui();

	//! @brief stateの変更
	//! 
	//! @param[in] state 次のstate
	void ChangeState(std::unique_ptr<BaseEnemyState> state);

	const Vector3f& GetPos() const { return worldTransform_.translation_; }

	void SetPos(const Vector3f& pos) { worldTransform_.translation_ = pos; }

private:

	////////////////////////////////////////////////////////////////////////////////////////////
	// Phase enum
	////////////////////////////////////////////////////////////////////////////////////////////
	enum class Phase {
		Approach, //!< 接近する
		Leave,    //!< 離脱する
	};

	//=========================================================================================
	// private variables
	//=========================================================================================

	Model* model_ = nullptr;
	uint32_t textureHandle_ = 0;

	// info //
	
	std::unique_ptr<BaseEnemyState> state_;
	WorldTransform worldTransform_;

};